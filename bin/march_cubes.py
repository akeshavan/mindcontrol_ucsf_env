#!/usr/bin/env python
__author__ = 'akeshavan'
import argparse

def march_the_cubes(data, aff):
    from skimage.measure import marching_cubes
    import numpy as np
    from dipy.tracking.utils import move_streamlines
    verts, faces = marching_cubes(data, level=0.5)
    verts = np.asarray(list(move_streamlines(verts, aff)))
    #TODO: apply affine here
    return verts, faces

def write_vtk(verts, faces, out_file):
    starter = """# vtk DataFile Version 2.0
Generated by Mindboggle (www.mindboggle.info)
ASCII
DATASET POLYDATA
POINTS {size} float
"""
    starter = starter.format(size = verts.shape[0])
    starter += "\n".join([" ".join(v.astype(str).tolist()) for v in verts])
    faces_template = """\nPOLYGONS {} {}\n""".format(faces.shape[0], 4*faces.shape[0])
    faces_template += "\n".join(["3 "+" ".join(f.astype(str)) for f in faces])
    out_vtk = starter+faces_template
    with open(out_file, "w") as f:
        f.write(out_vtk)
    return out_file

def read_vtk(vtk_file):
    import numpy as np
    with open(vtk_file, "r") as v:
        lines = v.readlines()
        idx = [i for i, l in enumerate(lines) if l.startswith("POINTS")]
        idx = idx[0] + 1
        poly = [j for j, l in enumerate(lines) if l.startswith("POLYGONS")]
        poly = poly[0] + 1
        vertices = [l.split() for l in lines[idx:poly-1]]
        faces = [l.split() for l in lines[poly:]]
        vertices = np.asarray(vertices).astype(float)
        faces = np.asarray(faces).astype(float)
    return vertices, faces




def create_vtk(in_file, out_file):

    import nibabel as nib
    import numpy as np
    from scipy.ndimage import label
    import pandas as pd

    img = nib.load(in_file)
    all_data = img.get_data()
    aff = img.get_affine()
    labelled, nlabels = label(all_data)
    counts = np.bincount(labelled.ravel())
    fnames = []
    df = pd.DataFrame()
    labels = []
    volumes = []
    for idx, num in enumerate(counts):
        if idx:
            verts, faces = march_the_cubes((labelled == idx).astype(float),
                                    aff)
            labels += (np.ones(verts.shape[0])*idx).astype(int).tolist()
            volumes += (np.ones(verts.shape[0])*num).tolist() #TODO: don't assume 1mm iso fool!!
        if idx == 1:
            Verts =verts
            Faces = faces
        elif idx> 1:
            extra_idx = np.ones(faces.shape)*Verts.shape[0]
            Verts = np.vstack((Verts, verts))
            Faces = np.vstack((Faces, faces+extra_idx))

    print("Verts shape, Faces shape", Verts.shape, Faces.shape)
    if not out_file.endswith(".vtk"):
        out_file += ".vtk"
    write_vtk(Verts, Faces, out_file)
    df["label_id"] = labels
    df["freesurfer thickness"] = volumes
    df["constant"] = 1.0
    df.to_csv(out_file.replace(".vtk", ".csv"))
    return fnames


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--in_file", dest="in_file")
    parser.add_argument("-o", "--out_file", dest="out_file")
    args = parser.parse_args()
    create_vtk(args.in_file, args.out_file)
